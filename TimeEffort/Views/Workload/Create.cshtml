@model TimeEffort.Models.WorkloadCreateModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_LayoutTest.cshtml";
}

<h2>Create</h2>


@*@using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h4>WorkloadViewModel</h4>
            <hr />
            @Html.ValidationSummary(true)

            <div class="form-group">
                @Html.LabelFor(model => model.ProjectId, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.ProjectId, (SelectList)ViewBag.Projects)
                    @Html.ValidationMessageFor(model => model.ProjectId)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Date, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Date)
                    @Html.ValidationMessageFor(model => model.Date)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Duration, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Duration)
                    @Html.ValidationMessageFor(model => model.Duration)
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Note, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Note)
                    @Html.ValidationMessageFor(model => model.Note)
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.WorkLoadTypeId, new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(model => model.WorkLoadTypeId,(SelectList)ViewBag.Types)
                    @Html.ValidationMessageFor(model => model.WorkLoadTypeId)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
    }*@

<table class="table table-bordered table-hover table-striped" id="myTable">
    <tr>
        <th class="hidden">
            #
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Types)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Projects)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Date)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Duration)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Note)
        </th>
        <th></th>
    </tr>
    <tbody id="tbody">
        @if (Model.Workloads.Count != 0)
        {
            foreach (var item in Model.Workloads)
            {
                <tr>
                    <td class="col-lg-1">@item.WorkLoadType</td>
                    <td class="col-lg-2">@item.Project</td>
                    <td class="col-lg-1">@item.Date.ToString("dd MMMM yyyy")</td>
                    <td class="col-lg-1">@item.Duration</td>
                    <td class="col-lg-2">@item.Note</td>
                    <td class="col-lg-1"> <button type="button" class="btn btn-sm btn-danger .btn-sx" onclick="deleteSaved(@item.Id);"> Delete Saved </button> </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" align="center">Add workload(s) so that you have 8 hours in total.</td>
            </tr>
        }
    </tbody>
    <tr>
        <td colspan="6">
            <div class="pull-right">
                Total:
                <span id="TotalHours">
                    @Model.Total
                </span>
            </div>
        </td>
    </tr>
</table>

<div class="panel panel-default">
    <div class="panel-heading">
        <i class="fa fa-clock-o fa-fw"></i> New workload
        <div class="pull-right">
            @*<i class="fa fa-plus-square-o fa-2x"></i>*@
            <button type="button" class="fa fa-plus-square-o fa-lg btn btn-primary" data-toggle="collapse" data-target="#newWorkloadDiv"></button>

        </div>
    </div>
    <!-- /.panel-heading -->
    <div class="panel-body collapse" id="newWorkloadDiv">
        <div class="row">
            <div class="col-lg-2">
                <label for="WorkLoadTypeId">Type:</label>
                <select class="form-control" id="WorkLoadTypeId" onchange="typeChange();">
                    @foreach (var item in Model.Types)
                    {
                        <option value=@(item.ID)>@(item.Name)</option>
                    }
                </select>
            </div>

            <div class="col-lg-4">
                <label for="ProjectId">Project:</label>
                <select class="form-control" id="ProjectId" onchange="main();">
                    <option value="0"></option>
                    @foreach (var item in Model.Projects)
                    {
                        <option value=@item.ID>@(item.Code) | @(item.Name)</option>
                    }
                </select>
            </div>

            <div class="col-lg-3">
                <div class="form-group">
                    <label for="Date">Date:</label>
                    <input type="date" name="Date" class="form-control" id="Date" onchange="main();" value=@Model.Date.ToString("yyyy-MM-dd")>
                </div>
            </div>
            <div class="col-lg-3">
                @*<label for="Duration" id="DurationOutput">Duration: 0.5*@
                <b>
                    <output name="DurationOutput" id="DurationOutput">
                        Duration: 0.5
                    </output>
                </b>
                @*</label>*@
                <input type="range" name="Duration" class="form-control" id="Duration" step="0.5" min="0.5" max="8" value="0.5" @*onchange="updateTextInput(this.value);"*@ oninput="DurationOutput.value = 'Duration: '+Duration.value" onchange="main();">
            </div>
        </div>
        <!-- /.row -->

        <div class="row">
            @*<div class="col-lg-4">
                    <label for="SelectUsers">Project:</label>
                    <select class="form-control" id="ProjectId" onchange="main();">
                        <option></option>
                        @foreach (var item in Model.Projects)
                        {
                            <option value=@item.ID>@(item.Code) | @(item.Name)</option>
                        }
                    </select>
                </div>*@
            <div class="col-lg-6">
                <div class="form-group">
                    <label for="Note">Note:</label>
                    <textarea name="Note" class="form-control" id="Note" onchange="main();"></textarea>
                </div>
            </div>
            <div class="col-lg-6">
                <div class="row"><div class="col-lg-12">&nbsp;</div></div>
                <div class="row"><div class="col-lg-12">&nbsp;</div></div>
                <div class="row"><div class="col-lg-12">&nbsp;</div></div>
                <div class="row">
                    <div class="col-lg-12">
                        <div class="pull-right">
                            <button type="button" class="btn btn-primary" onclick="addWorkload();"> Add new workload </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- /.row -->
    </div>
    <!-- /.panel-body -->
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="pull-right">
            <button type="button" class="btn btn-success" onclick="onSave();"> Save </button>
        </div>
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var totalHoursPlus = 0;
        $(document).ready(function () {
            $("#myTable .deleteLink").on("click", function () {
                var tr = $(this).closest('tr');
                tr.css("background-color", "#FF3700");
                tr.fadeOut(400, function () {
                    tr.remove();
                });
                return false;
            });

            totalHoursPlus = parseFloat($("#TotalHours").text());
        });
        function deleteMe() {
            var tr = $(this).closest('tr');
            tr.css("background-color", "#FF3700");
            tr.fadeOut(400, function () {
                tr.remove();
            });
            return false;
        }

        var list = [];
        var counter = 0;

        function updateTextInput(val) {
            document.getElementById('DurationOutput').value = val;
        }

        function typeChange() {
            if ($("#WorkLoadTypeId").val() == 1) {
                document.getElementById("ProjectId").disabled = false;
                //$('#ProjectId').val("");
            }
            else {
                document.getElementById("ProjectId").disabled = true;
            }

        }

        function checkWorkloadProject(requestData) {
            if (requestData.TypeId == 1) {
                if (requestData.ProjectId == 0) {
                    alert("Project cannot be empty if you choose Workload type of \n Work (Project)");
                    return null;
                }
            }
            else {
                requestData.ProjectId = null
                requestData.SelectedProject = "Overhead";
            }

            var successfully = true;

            list.forEach(function (item) {
                if (successfully)
                    if (requestData.SelectedType == "Work (Project)") {
                        if (requestData.ProjectId == item.ProjectId) {
                            alert("You have already added workload for this project for this date");
                            successfully = false;
                        }
                    }
                    else {
                        if (requestData.TypeId == item.TypeId) {
                            alert("You have already added workload type of " + requestData.SelectedType);
                            successfully = false;
                        }
                    }
            })

            if (!successfully)
                return;
            return requestData;
        }

        function main(request) {
            var requestData = {
                Number: list.length,
                ProjectId: $("#ProjectId").val(),
                Date: $('#Date').val(),
                Duration: $('#Duration').val(),
                Notes: $("#Note").val(),
                TypeId: $("#WorkLoadTypeId").val(),
                SelectedType: $('#WorkLoadTypeId option:selected').text(),
                SelectedProject: $('#ProjectId option:selected').text()
            };

            if (request != null)
                return requestData;
        }

        function addWorkload() {
            var row = checkWorkloadProject(main("not empty"));
            if (row != null) {
                list[counter] = row;
                counter++;
                drawRow(row);
                countTotalHours();
            }
        }

        function drawRow(rowData) {
            var row = $("<tr/>")
            $("#myTable").append(row);
            row.append($("<td class=\"hidden\">" + rowData.Number + "</td>"));
            row.append($("<td>" + rowData.SelectedType + "</td>"));
            row.append($("<td>" + rowData.SelectedProject + "</td>"));
            row.append($("<td>" + rowData.Date + "</td>"));
            row.append($("<td>" + rowData.Duration + " hours </td>"));
            row.append($("<td>" + rowData.Notes + "</td>"));
            row.append($('<td> <button type="button" class="btn btn-sm btn-danger .btn-sx" onclick="deleteRow(this,' + rowData.Number + ');"> Delete </button> </td>')); // this -> '+rowData.Number+'
        }

        var totalHours = 0;
        function countTotalHours() {
            totalHours = totalHoursPlus;
            list.forEach(function (item) {
                totalHours += parseFloat(item.Duration);
            });
            $("#TotalHours").text(totalHours);
        }

        function onSave() {
            if (totalHours != 8) {
                alert("Total Hours should be 8. \n If you have worked less than 8 hours, you should choose the 'Leave' type (either Sick or Unpaid leave)");
            }
            else {
                $.ajax({
                    url: '/Workload/ReceiveList',
                    type: 'POST',
                    data: JSON.stringify(list),
                    dataType: 'json',
                    contentType: 'application/json; charset=utf-8',
                    error: function (xhr) {
                        alert('Error: ' + xhr.statusText);
                    },
                    success: function (response) {
                        history.pushState("", document.title, "/Workload/Workloads" + window.location.search);
                        window.location.pathname = "/Workload/Workloads";
                    },
                    async: true,
                    processData: false
                });
            }
        }

        function deleteRow(td, rowNumber) {
            //$('#myTable tr').each(function (i, row) {
            //    var $row = $(row);
            //    var productLabelId = $row.find('td[name="number' + rowNumber + '"]');

            //    var $productLabelIdValue = productLabelId.text();
            //    if (parseInt(rowNumber) == parseInt($productLabelIdValue)) {
            //        $row.remove();
            //    }
            //});
            $(td).closest('tr').remove();
            delete list[rowNumber];
            countTotalHours();
            return false;
        }

        var deletingId = 0;
        function deleteSaved(id)
        {
            deletingId = id;
            $('#deleteModal').modal('show');
            return false;
        }


    </script>
}
<div class="modal fade" id="deleteModal" tabindex="-1" role="dialog" aria-labelledby="Delete">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel">Delete</h4>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this record?
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>
            <div class="modal-footer">
                TAPPS
            </div>
        </div>
    </div>
</div>