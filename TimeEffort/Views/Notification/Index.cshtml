@model IEnumerable<TimeEffort.Models.NotificationViewModel>

@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="row">
    <div class="col-lg-12">
        <h1 class="page-header">Notifications</h1>
    </div>
    <!-- /.col-lg-12 -->
</div>
<div class="panel panel-default">
    <div class="panel-heading">
        <i class="fa fa-bell-o fa-fw"></i>&nbsp; All notifications
        <div class="pull-right">
            <div class="btn-group">
                <button type="button" class="btn btn-default btn-xs dropdown-toggle" data-toggle="dropdown">
                    Actions
                    <span class="caret"></span>
                </button>
                <ul class="dropdown-menu pull-right" role="menu">
                    <li>
                        <a onclick="MarkAsRead();" href=""><i class="fa fa-check-square fa-fw"></i>Mark as read</a>
                    </li>
                    <li>
                        <a onclick="DeleteSelected();" href=""><i class="fa fa-trash fa-fw"></i>Delete selected</a>
                    </li>
                    <li class="divider"></li>
                    <li>
                        <a onclick="AllAsRead();" href=""><i class="fa fa-check-square-o fa-fw"></i> Mark all as Read</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <!-- /.panel-heading -->
    <div class="panel-body">
        <div class="table-responsive">
            <table class="table table-bordered table-hover table-condensed">
                <tr>
                    <th>

                    </th>
                    <th>
                        From
                    </th>
                    <th>
                        Message
                    </th>
                    <th>
                        Date
                    </th>
                </tr>

                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            <input type="checkbox" value=@(item.ID) name="checker" />
                        </td>
                        <td>
                            @if (!item.ISREAD)
                            { <b>System</b>}
                            else
                            {
                                @("System")
                            }
                        </td>

                        <td>
                            @if (!item.ISREAD)
                            {
                                <b>
                                    @Html.DisplayFor(modelItem => item.MESSAGE)
                                    <a href='@Url.Action("Edit", "Project", new { id = item.ProjectId })'>
                                        <i class="fa fa-edit fa-fw"></i> Edit Here
                                    </a>
                                </b>
                            }
                            else
                            {
                                @Html.DisplayFor(modelItem => item.MESSAGE)
                                <a href='@Url.Action("Edit", "Project", new { id = item.ProjectId })'>
                                    <i class="fa fa-edit fa-fw"></i> Edit Here
                                </a>
                            }
                        </td>

                        <td>
                            @if (!item.ISREAD)
                            {
                                <b>
                                    @item.Date.ToString("dd MMM")
                                </b>
                            }
                            else
                            {
                                @item.Date.ToString("dd MMM")
                            }
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>
</div>

<script>
    $(document).ready(function ()
    {
        $.notify.addStyle('foo', {
            html:
              '<div id="someContainer">' +
                '<div class="clearfix">' +
                  '<div class="title" data-notify-html="title"/>' +
                '</div>' +
              '</div>'
        });
    })

    var checkedNotifications = [];
    function GetAllSelected() {
        checkedNotifications = [];
        $("input:checkbox[name=checker]:checked").each(function () {
            checkedNotifications.push($(this).val());
        });
    }

    function MarkAsRead() {
        GetAllSelected();
        if (checkedNotifications.length == 0) {
            $(".notification").notify("You have not selected anything", { position: 'left bottom', className: 'error'});
            return false;
        }

        $.ajax({
            url: '/Notification/MarkAsRead',
            type: 'POST',
            data: JSON.stringify(checkedNotifications),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                alert('Error: ' + xhr.statusText);
            },
            success: function (response) {
                $(".notification").notify(response.message, { position: 'left bottom', className: 'success' });
                if (response.success)
                    window.location = location;
                location.reload();
            },
            async: true,
            processData: false
        });
    }

    function DeleteSelected() {
        GetAllSelected();
        if (checkedNotifications.length == 0) {
            $(".notification").notify("You have not selected anything", { position: 'left bottom', className: 'error' });
            return false;
        }

        $.ajax({
            url: '/Notification/DeleteSelected',
            type: 'POST',
            data: JSON.stringify(checkedNotifications),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                alert('Error: ' + xhr.statusText);
            },
            success: function (response) {
                $(".notification").notify(response.message, { position: 'left bottom', className: 'success' });
                window.location = location;
                location.reload();
            },
            async: true,
            processData: false
        });
    }

    function AllAsRead() {
        $.ajax({
            url: '/Notification/MarkAllAsRead',
            type: 'POST',
            data: JSON.stringify(checkedNotifications),
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            error: function (xhr) {
                alert('Error: ' + xhr.statusText);
            },
            success: function (response) {
                $(".notification").notify(response.message, { position: 'left bottom', className: 'success' });
                if (response.success)
                    window.location = location;
                location.reload();
            },
            async: true,
            processData: false
        });
    }


</script>

<style>
    .notifyjs-corner {
        width: 99% !important;
        margin: 17px !important;
    }

    .notifyjs-bootstrap-base {
        width: 25rem !important;
        text-align: center !important;
    }
</style>
